plugins {
	id 'org.springframework.boot' version '2.6.9'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'org.asciidoctor.jvm.convert' version "3.3.2"
}

group = 'dev.whatever-note'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.5")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.testng:testng:7.7.0'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Feign Client
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// Wire Mock
	testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// test containers
	testImplementation "org.testcontainers:junit-jupiter:1.17.2"
	testImplementation "org.testcontainers:mysql:1.17.2"

	// config processor
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
	configurations 'asciidoctorExtensions'
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

bootJar {
	dependsOn asciidoctor

	copy {
		from "${asciidoctor.outputDir}"
		into "BOOT-INF/classes/static/docs"
	}
	finalizedBy 'copyDocument'
}

task copyDocument(type: Copy) {
	dependsOn bootJar

	from file('build/docs/asciidoc')
	into file('src/main/resources/static/docs')
}

build {
	dependsOn copyDocument
}
